/**
 * @brief     scalar fpu fallback implementation of vpu macros.
 * @details   these macros will likely perform slower than a direct scalar
 *            implementation as they emulate vector operations that always
 *            operate on four floats.
 * @author    Thomas Atwood (tatwood.net)
 * @date      2012
 * @copyright unlicense / public domain
 ****************************************************************************/
#ifndef taa_FPU_H_
#define taa_FPU_H_

#include <taa/system.h>

typedef union taa_fpu_u taa_fpu_vec4;

union taa_DECLSPEC_ALIGN(16) taa_fpu_u
{
    float    f32[4];
    uint32_t u32[4];
} taa_ATTRIB_ALIGN(16) taa_ATTRIB_MAY_ALIAS;

//****************************************************************************
#define taa_fpu_mat33_transpose(c0_,c1_,c2_, c0_out_,c1_out_,c2_out_) \
    do { \
        (c0_out_).f32[0] = (c0_).f32[0]; \
        (c0_out_).f32[1] = (c1_).f32[0]; \
        (c0_out_).f32[2] = (c2_).f32[0]; \
        (c0_out_).f32[3] = (c2_).f32[3]; \
        (c1_out_).f32[0] = (c0_).f32[1]; \
        (c1_out_).f32[1] = (c1_).f32[1]; \
        (c1_out_).f32[2] = (c2_).f32[1]; \
        (c1_out_).f32[3] = (c2_).f32[3]; \
        (c2_out_).f32[0] = (c0_).f32[2]; \
        (c2_out_).f32[1] = (c1_).f32[2]; \
        (c2_out_).f32[2] = (c2_).f32[2]; \
        (c2_out_).f32[3] = (c2_).f32[3]; \
    } while(0)

//****************************************************************************
#define taa_fpu_mat34_mul_vec4(c0_, c1_, c2_, v_, out_) \
    do { \
        (out_).f32[0] = \
            (c0_).f32[0]*(v_).f32[0] + \
            (c1_).f32[0]*(v_).f32[1] + \
            (c2_).f32[0]*(v_).f32[2];  \
        (out_).f32[1] = \
            (c0_).f32[1]*(v_).f32[0] + \
            (c1_).f32[1]*(v_).f32[1] + \
            (c2_).f32[1]*(v_).f32[2];  \
        (out_).f32[2] = \
            (c0_).f32[2]*(v_).f32[0] + \
            (c1_).f32[2]*(v_).f32[1] + \
            (c2_).f32[2]*(v_).f32[2];  \
        (out_).f32[3] = \
            (c0_).f32[3]*(v_).f32[0] + \
            (c1_).f32[3]*(v_).f32[1] + \
            (c2_).f32[3]*(v_).f32[2];  \
    } while(0)

//****************************************************************************
#define taa_fpu_mat44_abs( \
        c0_, c1_, c2_, c3_,  \
        c0_out_, c1_out_, c2_out_, c3_out_) \
    do { \
        taa_fpu_abs(c0_, c0_out_); \
        taa_fpu_abs(c1_, c1_out_); \
        taa_fpu_abs(c2_, c2_out_); \
        taa_fpu_abs(c3_, c3_out_); \
    } while(0)

//****************************************************************************
#define taa_fpu_mat44_mul_vec4(c0_, c1_, c2_, c3_, v_, out_) \
    do { \
        (out_).f32[0] = \
            (c0_).f32[0]*(v_).f32[0] + \
            (c1_).f32[0]*(v_).f32[1] + \
            (c2_).f32[0]*(v_).f32[2] + \
            (c3_).f32[0]*(v_).f32[3]; \
        (out_).f32[1] = \
            (c0_).f32[1]*(v_).f32[0] + \
            (c1_).f32[1]*(v_).f32[1] + \
            (c2_).f32[1]*(v_).f32[2] + \
            (c3_).f32[1]*(v_).f32[3]; \
        (out_).f32[2] = \
            (c0_).f32[2]*(v_).f32[0] + \
            (c1_).f32[2]*(v_).f32[1] + \
            (c2_).f32[2]*(v_).f32[2] + \
            (c3_).f32[2]*(v_).f32[3]; \
        (out_).f32[3] = \
            (c0_).f32[3]*(v_).f32[0] + \
            (c1_).f32[3]*(v_).f32[1] + \
            (c2_).f32[3]*(v_).f32[2] + \
            (c3_).f32[3]*(v_).f32[3]; \
    } while(0)

//****************************************************************************
#define taa_fpu_mat44_transpose( \
        c0_,c1_,c2_,c3_, \
        c0_out_,c1_out_,c2_out_,c3_out_) \
    do { \
        (c0_out_).f32[0] = (c0_).f32[0]; \
        (c0_out_).f32[1] = (c1_).f32[0]; \
        (c0_out_).f32[2] = (c2_).f32[0]; \
        (c0_out_).f32[3] = (c3_).f32[0]; \
        (c1_out_).f32[0] = (c0_).f32[1]; \
        (c1_out_).f32[1] = (c1_).f32[1]; \
        (c1_out_).f32[2] = (c2_).f32[1]; \
        (c1_out_).f32[3] = (c3_).f32[1]; \
        (c2_out_).f32[0] = (c0_).f32[2]; \
        (c2_out_).f32[1] = (c1_).f32[2]; \
        (c2_out_).f32[2] = (c2_).f32[2]; \
        (c2_out_).f32[3] = (c3_).f32[2]; \
        (c3_out_).f32[0] = (c0_).f32[3]; \
        (c3_out_).f32[1] = (c1_).f32[3]; \
        (c3_out_).f32[2] = (c2_).f32[3]; \
        (c3_out_).f32[3] = (c3_).f32[3]; \
    } while(0)

//****************************************************************************
#define taa_fpu_abs(a_, out_) \
    do { \
        (out_).f32[0] = (float) fabs((a_).f32[0]); \
        (out_).f32[1] = (float) fabs((a_).f32[1]); \
        (out_).f32[2] = (float) fabs((a_).f32[2]); \
        (out_).f32[3] = (float) fabs((a_).f32[3]); \
    } while(0)

//****************************************************************************
#define taa_fpu_add(a_, b_, out_) \
    do { \
        (out_).f32[0] = (a_).f32[0] + (b_).f32[0]; \
        (out_).f32[1] = (a_).f32[1] + (b_).f32[1]; \
        (out_).f32[2] = (a_).f32[2] + (b_).f32[2]; \
        (out_).f32[3] = (a_).f32[3] + (b_).f32[3]; \
    } while(0)

//****************************************************************************
#define taa_fpu_and(a_, b_, out_) \
    do { \
        (out_).u32[0] = (a_).u32[0] & (b_).u32[0]; \
        (out_).u32[1] = (a_).u32[1] & (b_).u32[1]; \
        (out_).u32[2] = (a_).u32[2] & (b_).u32[2]; \
        (out_).u32[3] = (a_).u32[3] & (b_).u32[3]; \
    } while(0)

//****************************************************************************
#define taa_fpu_cmpagt(a_, b_, out_) \
    do { \
        (out_).u32[0] = (fabs(a_.f32[0]) > fabs(b_.f32[0])) * 0xffffffff; \
        (out_).u32[1] = (fabs(a_.f32[1]) > fabs(b_.f32[1])) * 0xffffffff; \
        (out_).u32[2] = (fabs(a_.f32[2]) > fabs(b_.f32[2])) * 0xffffffff; \
        (out_).u32[3] = (fabs(a_.f32[3]) > fabs(b_.f32[3])) * 0xffffffff; \
    } while(0)

//****************************************************************************
#define taa_fpu_cmpgt(a_, b_, out_) \
    do { \
        (out_).u32[0] = ((a_).f32[0] > (b_).f32[0]) * 0xffffffff; \
        (out_).u32[1] = ((a_).f32[1] > (b_).f32[1]) * 0xffffffff; \
        (out_).u32[2] = ((a_).f32[2] > (b_).f32[2]) * 0xffffffff; \
        (out_).u32[3] = ((a_).f32[3] > (b_).f32[3]) * 0xffffffff; \
    } while(0)

//****************************************************************************
#define taa_fpu_cross3(a_, b_, out_) \
    do { \
        (out_).f32[0] = (a_).f32[1]*(b_).f32[2] - (a_).f32[2]*(b_).f32[1]; \
        (out_).f32[1] = (a_).f32[2]*(b_).f32[0] - (a_).f32[0]*(b_).f32[2]; \
        (out_).f32[2] = (a_).f32[0]*(b_).f32[1] - (a_).f32[1]*(b_).f32[0]; \
        (out_).f32[3] = 0.0f; \
    } while(0)

//****************************************************************************
#define taa_fpu_div(a_, b_, out_) \
    do { \
        (out_).f32[0] = (a_).f32[0] / (b_).f32[0]; \
        (out_).f32[1] = (a_).f32[1] / (b_).f32[1]; \
        (out_).f32[2] = (a_).f32[2] / (b_).f32[2]; \
        (out_).f32[3] = (a_).f32[3] / (b_).f32[3]; \
    } while(0)

//****************************************************************************
#define taa_fpu_dot(a_, b_, out_) \
    do { \
        float d_ = \
            (a_).f32[0] * (b_).f32[0] + \
            (a_).f32[1] * (b_).f32[1] + \
            (a_).f32[2] * (b_).f32[2] + \
            (a_).f32[3] * (b_).f32[3]; \
        (out_).f32[0] = d_; \
        (out_).f32[1] = d_; \
        (out_).f32[2] = d_; \
        (out_).f32[3] = d_; \
    } while(0)

//****************************************************************************
#define taa_fpu_load(pa_, out_) \
    do { \
        (out_).f32[0] = (pa_)[0]; \
        (out_).f32[1] = (pa_)[1]; \
        (out_).f32[2] = (pa_)[2]; \
        (out_).f32[3] = (pa_)[3]; \
    } while(0)

//****************************************************************************
#define taa_fpu_max(a_, b_, out_) \
    do { \
        (out_).f32[0] = ((a_).f32[0]>(b_).f32[0]) ? (a_).f32[0]:(b_).f32[0]; \
        (out_).f32[1] = ((a_).f32[1]>(b_).f32[1]) ? (a_).f32[1]:(b_).f32[1]; \
        (out_).f32[2] = ((a_).f32[2]>(b_).f32[2]) ? (a_).f32[2]:(b_).f32[2]; \
        (out_).f32[3] = ((a_).f32[3]>(b_).f32[3]) ? (a_).f32[3]:(b_).f32[3]; \
    } while(0)

//****************************************************************************
#define taa_fpu_min(a_, b_, out_) \
    do { \
        (out_).f32[0] = ((a_).f32[0]<(b_).f32[0]) ? (a_).f32[0]:(b_).f32[0]; \
        (out_).f32[1] = ((a_).f32[1]<(b_).f32[1]) ? (a_).f32[1]:(b_).f32[1]; \
        (out_).f32[2] = ((a_).f32[2]<(b_).f32[2]) ? (a_).f32[2]:(b_).f32[2]; \
        (out_).f32[3] = ((a_).f32[3]<(b_).f32[3]) ? (a_).f32[3]:(b_).f32[3]; \
    } while(0)

#define taa_fpu_mov(a_, out_) \
    ((out_) = (a_))

//****************************************************************************
#define taa_fpu_mul(a_, b_, out_) \
    do { \
        (out_).f32[0] = (a_).f32[0] * (b_).f32[0]; \
        (out_).f32[1] = (a_).f32[1] * (b_).f32[1]; \
        (out_).f32[2] = (a_).f32[2] * (b_).f32[2]; \
        (out_).f32[3] = (a_).f32[3] * (b_).f32[3]; \
    } while(0)

//****************************************************************************
#define taa_fpu_neg(a_, out_) \
    do { \
        (out_).f32[0] = -(a_).f32[0]; \
        (out_).f32[1] = -(a_).f32[1]; \
        (out_).f32[2] = -(a_).f32[2]; \
        (out_).f32[3] = -(a_).f32[3]; \
    } while(0)

//****************************************************************************
#define taa_fpu_normalize(a_, out_) \
    do { \
        const float xx_ = (a_).f32[0] * (a_).f32[0]; \
        const float yy_ = (a_).f32[1] * (a_).f32[1]; \
        const float zz_ = (a_).f32[2] * (a_).f32[2]; \
        const float ww_ = (a_).f32[3] * (a_).f32[3]; \
        const float rlen_ = 1.0f/(((float) sqrt(xx_+yy_+zz_+ww_)) + FLT_MIN);\
        (out_).f32[0] = (a_).f32[0]*rlen_; \
        (out_).f32[1] = (a_).f32[1]*rlen_; \
        (out_).f32[2] = (a_).f32[2]*rlen_; \
        (out_).f32[3] = (a_).f32[3]*rlen_; \
    } while(0)

//****************************************************************************
#define taa_fpu_or(a_, b_, out_) \
    do { \
        (out_).u32[0] = (a_).u32[0] | (b_).u32[0]; \
        (out_).u32[1] = (a_).u32[1] | (b_).u32[1]; \
        (out_).u32[2] = (a_).u32[2] | (b_).u32[2]; \
        (out_).u32[3] = (a_).u32[3] | (b_).u32[3]; \
    } while(0)

//****************************************************************************
#define taa_fpu_rsqrt(a_, out_) \
    do { \
        (out_).f32[0] = 1.0f/((float) sqrt((a_).f32[0])); \
        (out_).f32[1] = 1.0f/((float) sqrt((a_).f32[1])); \
        (out_).f32[2] = 1.0f/((float) sqrt((a_).f32[2])); \
        (out_).f32[3] = 1.0f/((float) sqrt((a_).f32[3])); \
    } while(0)

//****************************************************************************
#define taa_fpu_set(x_, y_, z_, w_, out_) \
    do { \
        (out_).f32[0] = x_; \
        (out_).f32[1] = y_; \
        (out_).f32[2] = z_; \
        (out_).f32[3] = w_; \
    } while(0)

//****************************************************************************
#define taa_fpu_set1(x_, out_) \
    do { \
        (out_).f32[0] = x_; \
        (out_).f32[1] = x_; \
        (out_).f32[2] = x_; \
        (out_).f32[3] = x_; \
    } while(0)

//****************************************************************************
#define taa_fpu_shuf_aw_bx_cw_dx(a_, b_, c_, d_, out_) \
    do { \
        (out_).f32[0] = (a_).f32[3]; \
        (out_).f32[1] = (b_).f32[0]; \
        (out_).f32[2] = (c_).f32[3]; \
        (out_).f32[3] = (d_).f32[0]; \
    } while(0)

//****************************************************************************
#define taa_fpu_shuf_ax_ay_az_bx(a_, b_, out_) \
    do { \
        (out_).f32[0] = (a_).f32[0]; \
        (out_).f32[1] = (a_).f32[1]; \
        (out_).f32[2] = (a_).f32[2]; \
        (out_).f32[3] = (b_).f32[0]; \
    } while(0)

//****************************************************************************
#define taa_fpu_store(a_, out_) \
    do { \
        (out_)[0] = (a_).f32[0]; \
        (out_)[1] = (a_).f32[1]; \
        (out_)[2] = (a_).f32[2]; \
        (out_)[3] = (a_).f32[3]; \
    } while(0)

//****************************************************************************
#define taa_fpu_store1(a_, out_) \
    (*(out_) = (a_).f32[0])

//****************************************************************************
#define taa_fpu_sub(a_, b_, out_) \
    do { \
        (out_).f32[0] = (a_).f32[0] - (b_).f32[0]; \
        (out_).f32[1] = (a_).f32[1] - (b_).f32[1]; \
        (out_).f32[2] = (a_).f32[2] - (b_).f32[2]; \
        (out_).f32[3] = (a_).f32[3] - (b_).f32[3]; \
    } while(0)

//****************************************************************************
#define taa_fpu_xor(a_, b_, out_) \
    do { \
        (out_).u32[0] = (a_).u32[0] ^ (b_).u32[0]; \
        (out_).u32[1] = (a_).u32[1] ^ (b_).u32[1]; \
        (out_).u32[2] = (a_).u32[2] ^ (b_).u32[2]; \
        (out_).u32[3] = (a_).u32[3] ^ (b_).u32[3]; \
    } while(0)

#endif // taa_FPU_H_
